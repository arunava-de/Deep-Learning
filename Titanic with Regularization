#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pickle
import tensorflow as tf
import pandas as pd
import numpy as np
from statistics import mode
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder, OneHotEncoder, Imputer


# In[2]:


filename = "./titanic/train.csv"
train = pd.read_csv(filename)


# In[3]:


train.shape
train.columns.values


# In[4]:


Y_true = train['Survived'].copy()
X = train.copy()
del X['Survived'] 
X.info()
del(X['Cabin'])
del(X['Ticket'])


# In[5]:


np.mean(X['Age'])
X['Age'] = X['Age'].fillna(np.mean(X['Age']))
X.groupby('Embarked').count()
X['Embarked'] = X['Embarked'].fillna(mode(X['Embarked']))
X.head()
preprocessed_X = X.copy()


# In[6]:


categorical_columns = ['Pclass','Sex','Embarked']
le = LabelEncoder()
preprocessed_X[categorical_columns] = preprocessed_X[categorical_columns].apply(lambda col: le.fit_transform(col))


# In[8]:


enc = OneHotEncoder(sparse=False )
# preprocessed_X = enc.fit(preprocessed_X)
pclass_ohe = preprocessed_X[['Pclass']]
sex_ohe = preprocessed_X[['Sex']]
emb_ohe = preprocessed_X[['Embarked']]
pclass_ohe = enc.fit_transform(pclass_ohe)
sex_ohe = enc.fit_transform(sex_ohe)
emb_ohe = enc.fit_transform(emb_ohe)


# In[39]:


# # Y_ohe = enc.fit_transform(train[['Survived']])
# # Y_ohe.shape
# # Y_ohe = pd.DataFrame(Y_ohe)
# Y_ohe.head()


# In[26]:


# Y_ohe = enc.fit_transform(Y_true)
Y_ohe.shape


# In[9]:


del(preprocessed_X['Pclass'])
del(preprocessed_X['Embarked'])
del(preprocessed_X['Sex'])


# In[10]:


preprocessed_X['PC1'] = pclass_ohe[:,0]
preprocessed_X['PC2'] = pclass_ohe[:,1]
preprocessed_X['PC3'] = pclass_ohe[:,2]
preprocessed_X['S1'] = sex_ohe[:,0]
preprocessed_X['S2'] = sex_ohe[:,1]
preprocessed_X['E1'] = emb_ohe[:,0]
preprocessed_X['E2'] = emb_ohe[:,1]
preprocessed_X['E3'] = emb_ohe[:,2]


# In[11]:


name = preprocessed_X['Name']
vectorizer = TfidfVectorizer(max_features = 200)
name = vectorizer.fit_transform(name).toarray()
name = pd.DataFrame(name)
name.head()
del preprocessed_X['Name']


# In[12]:


preprocessed_X = pd.concat([preprocessed_X, name], axis = 1)


# In[13]:


# preprocessed_X.to_csv("Titanic_features.csv")
# preprocessed_X = pd.read_csv("Titanic_features.csv", index_col=0)
preprocessed_X.shape


# In[14]:


# Y_ohe = Y_ohe.to_frame()
Y_true = Y_true.to_frame()
X_train, X_dev, y_train, y_dev = train_test_split(preprocessed_X, Y_true, test_size=0.16, random_state=42)
X_train = X_train.T
X_dev = X_dev.T
y_train = y_train.T
y_dev = y_dev.T


# In[15]:


y_dev.shape


# In[16]:


def one_hot_encode(Y):
    return enc.transform(Y)

def create_mini_batches(X, y, batch_size, seed): 
    mini_batches = [] 
    data = np.hstack((X.T, y.T)) 
    np.random.seed(seed)
    np.random.shuffle(data) 
    n_minibatches = data.shape[0] // batch_size 
    i = 0
  
    for i in range(n_minibatches + 1): 
        mini_batch = data[i * batch_size:(i + 1)*batch_size, :] 
        X_mini = mini_batch[:, :-1] 
        Y_mini = mini_batch[:, -1].reshape((-1, 1)) 
        mini_batches.append((X_mini, Y_mini)) 
    if data.shape[0] % batch_size != 0: 
        mini_batch = data[i * batch_size:data.shape[0]] 
        X_mini = mini_batch[:, :-1] 
        Y_mini = mini_batch[:, -1].reshape((-1, 1)) 
        mini_batches.append((X_mini, Y_mini)) 
    return mini_batches


# In[44]:


def create_placeholders(n_x, n_y):
    X = tf.placeholder(tf.float32, shape=(n_x, None))
    Y = tf.placeholder(tf.float32, shape=(n_y, None))
    
    return X, Y

def initialize_parameters():
    W1 = tf.get_variable("W1", [25,213], initializer = tf.contrib.layers.xavier_initializer(seed = 1), trainable=True)
    b1 = tf.get_variable("b1", [25,1], initializer = tf.zeros_initializer())
    W2 = tf.get_variable("W2", [12, 25], initializer = tf.contrib.layers.xavier_initializer(seed = 1), trainable=True)
    b2 = tf.get_variable("b2", [12,1], initializer = tf.zeros_initializer())
    W3 = tf.get_variable("W3", [6, 12], initializer = tf.contrib.layers.xavier_initializer(seed = 1), trainable=True)
    b3 = tf.get_variable("b3", [6,1], initializer = tf.zeros_initializer())
    W4 = tf.get_variable("W4", [2, 6], initializer = tf.contrib.layers.xavier_initializer(seed = 1))
    b4 = tf.get_variable("b4", [2,1], initializer = tf.zeros_initializer())
    
    parameters = {"W1": W1,
                  "b1": b1,
                  "W2": W2,
                  "b2": b2,
                  "W3": W3,
                  "b3": b3,
                  "W4": W4,
                  "b4": b4}
    
    return parameters


# In[45]:


def forward_propagation(X, parameters):
    W1 = parameters['W1']
    b1 = parameters['b1']
    W2 = parameters['W2']
    b2 = parameters['b2']
    W3 = parameters['W3']
    b3 = parameters['b3']
    W4 = parameters['W4']
    b4 = parameters['b4']
    
    Z1 = tf.add(tf.matmul(W1, X),b1)                                              # Z1 = np.dot(W1, X) + b1
    A1 = tf.nn.relu(Z1)                                              # A1 = relu(Z1)
    Z2 = tf.add(tf.matmul(W2, A1),b2)                                              # Z2 = np.dot(W2, a1) + b2
    A2 = tf.nn.relu(Z2)                                              # A2 = relu(Z2)
    Z3 = tf.add(tf.matmul(W3, A2),b3)  
    A3 = tf.nn.relu(Z3)
    Z4 = tf.add(tf.matmul(W4,A3),b4)
    
    return Z4

def compute_cost(Z4,Y):
    logits = tf.transpose(Z4)
    labels = tf.transpose(Y)
    l1_regularizer = tf.contrib.layers.l1_regularizer(scale=0.005, scope=None)
    weights = tf.trainable_variables()
    regularization_penalty = tf.contrib.layers.apply_regularization(l1_regularizer, weights)
    
    cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits = logits, labels = labels))
    cost = cost + regularization_penalty
    
    return cost


# In[19]:


tf.reset_default_graph()

with tf.Session() as sess:
    X, Y = create_placeholders(213, 2)
    parameters = initialize_parameters()
    Z3 = forward_propagation(X, parameters)
    cost = compute_cost(Z3, Y)
    print("cost = " + str(cost))


# In[55]:


def model(X_train, y_train, X_dev, y_dev, learning_rate = 0.0003,
          num_epochs = 1000, minibatch_size = 16, print_cost = True):
    
    tf.reset_default_graph()                         # to be able to rerun the model without overwriting tf variables
    tf.set_random_seed(1)                             # to keep consistent results
    seed = 3                                          # to keep consistent results
    (n_x, m) = X_train.shape                          # (n_x: input size, m : number of examples in the train set)
    n_y = 2                           # n_y : output size
    costs = []
    
    X, Y = create_placeholders(n_x, n_y)
    parameters = initialize_parameters()
    Z4 = forward_propagation(X, parameters)
    cost = compute_cost(Z4, Y)
    optimizer = tf.train.AdamOptimizer(learning_rate = learning_rate).minimize(cost)
    init = tf.global_variables_initializer()
    
    with tf.Session() as sess:
        sess.run(init)
        
        for epoch in range(num_epochs):
            epoch_cost = 0
            num_minibatches = int(m / minibatch_size) # number of minibatches of size minibatch_size in the train set
            seed = seed + 1
            minibatches = create_mini_batches(X_train, y_train, minibatch_size, seed)
#             print(len(minibatches[0]))
            for i in range(len(minibatches)-1):
                (minibatch_X, minibatch_Y) = minibatches[i]
#                 print(minibatch_Y.shape)\
#                 print(minibatch_X.shape)
                minibatch_Y = one_hot_encode(minibatch_Y)
#                 print(minibatch_Y.shape)
                _ , minibatch_cost = sess.run([optimizer, cost], feed_dict={X: minibatch_X.T, Y: minibatch_Y.T})
                epoch_cost += minibatch_cost / num_minibatches

            if print_cost == True and epoch % 100 == 0:
                print ("Cost after epoch %i: %f" % (epoch, epoch_cost))
            if print_cost == True and epoch % 5 == 0:
                costs.append(epoch_cost)
                
        parameters = sess.run(parameters)
        print ("Parameters have been trained!")
        correct_prediction = tf.equal(tf.argmax(Z4), tf.argmax(Y))
        accuracy = tf.reduce_mean(tf.cast(correct_prediction, "float"))
        y_train = one_hot_encode(y_train.T).T
        y_dev = one_hot_encode(y_dev.T).T
        print ("Train Accuracy:", accuracy.eval({X: X_train, Y: y_train}))
        print ("Dev set Accuracy:", accuracy.eval({X: X_dev, Y: y_dev}))
        
        return parameters


# In[56]:


parameters = model(X_train, y_train, X_dev, y_dev)


# In[57]:


def forward_propagation_for_predict(X, parameters):
    """
    Implements the forward propagation for the model: LINEAR -> RELU -> LINEAR -> RELU -> LINEAR -> SOFTMAX
    
    Arguments:
    X -- input dataset placeholder, of shape (input size, number of examples)
    parameters -- python dictionary containing your parameters "W1", "b1", "W2", "b2", "W3", "b3"
                  the shapes are given in initialize_parameters

    Returns:
    Z3 -- the output of the last LINEAR unit
    """
    
    # Retrieve the parameters from the dictionary "parameters" 
    W1 = parameters['W1']
    b1 = parameters['b1']
    W2 = parameters['W2']
    b2 = parameters['b2']
    W3 = parameters['W3']
    b3 = parameters['b3'] 
    W4 = parameters['W4']
    b4 = parameters['b4']
                                                           # Numpy Equivalents:
    Z1 = tf.add(tf.matmul(W1, X), b1)                      # Z1 = np.dot(W1, X) + b1
    A1 = tf.nn.relu(Z1)                                    # A1 = relu(Z1)
    Z2 = tf.add(tf.matmul(W2, A1), b2)                     # Z2 = np.dot(W2, a1) + b2
    A2 = tf.nn.relu(Z2)                                    # A2 = relu(Z2)
    Z3 = tf.add(tf.matmul(W3, A2), b3)                     # Z3 = np.dot(W3,Z2) + b3
    A3 = tf.nn.relu(Z3)
    Z4 = tf.add(tf.matmul(W4,A3),b4)
    
    return Z4

def predict(X, parameters, n):
    
    W1 = tf.convert_to_tensor(parameters["W1"])
    b1 = tf.convert_to_tensor(parameters["b1"])
    W2 = tf.convert_to_tensor(parameters["W2"])
    b2 = tf.convert_to_tensor(parameters["b2"])
    W3 = tf.convert_to_tensor(parameters["W3"])
    b3 = tf.convert_to_tensor(parameters["b3"])
    W4 = tf.convert_to_tensor(parameters["W4"])
    b4 = tf.convert_to_tensor(parameters["b4"])
    
    params = {"W1": W1,
              "b1": b1,
              "W2": W2,
              "b2": b2,
              "W3": W3,
              "b3": b3,
              "W4": W4,
              "b4": b4,
             }
    
    x = tf.placeholder("float", [213, n])
    
    z4 = forward_propagation_for_predict(x, params)
    p = tf.argmax(z4)
    
    sess = tf.Session()
    prediction = sess.run(p, feed_dict = {x: X})
        
    return prediction


# In[59]:


filename = "./titanic/test.csv"
test = pd.read_csv(filename)


# In[60]:


test.columns.values


# In[65]:


X = test.copy()
# del X['Survived'] 
X.info()
del(X['Cabin'])
del(X['Ticket'])
np.mean(X['Age'])
X['Age'] = X['Age'].fillna(np.mean(X['Age']))
X.groupby('Embarked').count()
X['Embarked'] = X['Embarked'].fillna(mode(X['Embarked']))
X.head()
preprocessed_X = X.copy()
preprocessed_X['Fare'] = preprocessed_X['Fare'].fillna(np.mean(preprocessed_X['Fare']))


# In[66]:


preprocessed_X.info()


# In[67]:


preprocessed_X[categorical_columns] = preprocessed_X[categorical_columns].apply(lambda col: le.fit_transform(col))


# In[68]:


pclass_ohe = preprocessed_X[['Pclass']]
sex_ohe = preprocessed_X[['Sex']]
emb_ohe = preprocessed_X[['Embarked']]
pclass_ohe = enc.fit_transform(pclass_ohe)
sex_ohe = enc.fit_transform(sex_ohe)
emb_ohe = enc.fit_transform(emb_ohe)
del(preprocessed_X['Pclass'])
del(preprocessed_X['Embarked'])
del(preprocessed_X['Sex'])
preprocessed_X['PC1'] = pclass_ohe[:,0]
preprocessed_X['PC2'] = pclass_ohe[:,1]
preprocessed_X['PC3'] = pclass_ohe[:,2]
preprocessed_X['S1'] = sex_ohe[:,0]
preprocessed_X['S2'] = sex_ohe[:,1]
preprocessed_X['E1'] = emb_ohe[:,0]
preprocessed_X['E2'] = emb_ohe[:,1]
preprocessed_X['E3'] = emb_ohe[:,2]


# In[69]:


name = preprocessed_X['Name']
name = vectorizer.transform(name).toarray()
name = pd.DataFrame(name)
name.head()
del preprocessed_X['Name']
preprocessed_X = pd.concat([preprocessed_X, name], axis = 1)
# preprocessed_X.to_csv("Titanic_features.csv")


# In[73]:


test_pred = predict(preprocessed_X.T, parameters, preprocessed_X.T.shape[1])
test_pred = test_pred.reshape(preprocessed_X.T.shape[1],1)


# In[75]:


predictions = pd.DataFrame(test_pred, columns = ['Survived'])


# In[77]:


predictions = pd.concat([test['PassengerId'], predictions], axis = 1)


# In[80]:


predictions.to_csv("Titanic_predictions.csv")







